{"application":{"0":"openstack","1":"openstack","2":"openstack","3":"openstack","4":"openstack","5":"openstack","6":"openstack","7":"openstack","8":"openstack","9":"openstack","10":"openstack","11":"openstack","12":"openstack","13":"openstack","14":"openstack","15":"openstack"},"id":{"0":2,"1":3,"2":4,"3":5,"4":6,"5":7,"6":8,"7":9,"8":10,"9":11,"10":12,"11":13,"12":14,"13":15,"14":16,"15":17},"question":{"0":"How long did it take to spawn instance 3edec1e4-9678-4a3a-a21b-a145a4ee5e61 on the hypervisor?","1":"What was the total time taken to build instance 3edec1e4-9678-4a3a-a21b-a145a4ee5e61?","2":"What was the total time taken to build instance 3edec1e4-9678-4a3a-a21b-a145a4ee5e61?","3":"What is the vCPU usage for compute node cp-1.slowvm1.tcloud-pg0.utah.cloudlab.us?","4":"What is the RAM usage for compute node cp-1.slowvm1.tcloud-pg0.utah.cloudlab.us?","5":"What was the maximum response time for GET request to \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/detail?","6":"How many POST requests to \/v2\/e9746973ac574c6b8a9e8857f56a7608\/os-server-external-events resulted in a 200 status code?","7":"What's the average response time for DELETE requests to \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/","8":"How many instances of 'HTTP exception thrown: No instances found for any event' occurred in the nova-api logs in the last 40 days?","9":"What errors were encountered during the ComputeManager._run_image_cache_manager_pass operation in the last 40 days?","10":"How many times did we receive a 503 status code while validating tokens in the past 30 days?","11":"How many active base files are currently in use?","12":"What is the latest usage status of image 0673dd71-34c5-4fbb-86c4-40623fbe45b4?","13":"How many unknown base files were detected in the last 30 days?","14":"How long did it take to deallocate the network for instance 3edec1e4-9678-4a3a-a21b-a145a4ee5e61?","15":"How many network-vif-plugged events were created in the last hour?"},"logql_query":{"0":"{application=\"openstack\", log_file_type=\"nova-compute\", component=\"nova.compute.manager\"} |= \"3edec1e4-9678-4a3a-a21b-a145a4ee5e61\" |= \"Took\" |= \"seconds to spawn the instance on the hypervisor\" | regexp \"\\\\[instance: (?P<instance_id>[^\\\\]]+)\\\\] Took (?P<spawn_time>\\\\d+\\\\.\\\\d+) seconds to spawn the instance on the hypervisor\" | line_format \"{{.instance_id}} took {{.spawn_time}}\"","1":"{application=\"openstack\", log_file_type=\"nova-compute\"} |= `3edec1e4-9678-4a3a-a21b-a145a4ee5e61` |= `Took` |= `seconds to build instance` | regexp `\\[instance: (?P<instance_id>[^\\]]+)\\] Took (?P<build_time>\\d+\\.\\d+) seconds to build instance` | line_format `{{.build_time}}`","2":"{application=\"openstack\", log_file_type=\"nova-compute\"} |= \"3416d0fa-6f0f-41ce-9c0a-59ae9a735da8\" |~ \"Total (memory|disk|vcpu):\" | regexp \"\\\\[instance: (?P<instance_id>[^\\\\]]+)\\\\] Total (?P<resource>\\\\w+): (?P<total>\\\\d+(?:\\\\.\\\\d+)?) (?P<unit>\\\\w+), used: (?P<used>\\\\d+(?:\\\\.\\\\d+)?) \\\\w+\" | line_format \"{{.resource}}: {{.used}} {{.unit}} used out of {{.total}} {{.unit}}\"","3":"max by (node) (\n  max_over_time(\n    {application=\"openstack\", log_file_type=\"nova-compute\", component=\"nova.compute.resource_tracker\"}\n    |= \"cp-1.slowvm1.tcloud-pg0.utah.cloudlab.us\"\n    |= \"Final resource view:\"\n    | regexp \"Final resource view: name=(?P<node>\\\\S+) phys_ram=(?P<total_ram>\\\\d+)MB used_ram=(?P<used_ram>\\\\d+)MB phys_disk=(?P<total_disk>\\\\d+)GB used_disk=(?P<used_disk>\\\\d+)GB total_vcpus=(?P<total_vcpus>\\\\d+) used_vcpus=(?P<used_vcpus>\\\\d+)\"\n    | label_format\n        used_vcpus=\"{{.used_vcpus}}\"\n    | unwrap used_vcpus\n    [30d]\n  )\n)","4":"max by (node) (\n  max_over_time(\n    {application=\"openstack\", log_file_type=\"nova-compute\", component=\"nova.compute.resource_tracker\"}\n    |= \"cp-1.slowvm1.tcloud-pg0.utah.cloudlab.us\"\n    |= \"Final resource view:\"\n    | regexp \"Final resource view: name=(?P<node>\\\\S+) phys_ram=(?P<total_ram>\\\\d+)MB used_ram=(?P<used_ram>\\\\d+)MB phys_disk=(?P<total_disk>\\\\d+)GB used_disk=(?P<used_disk>\\\\d+)GB total_vcpus=(?P<total_vcpus>\\\\d+) used_vcpus=(?P<used_vcpus>\\\\d+)\"\n    | label_format \n        used_ram_mb=\"{{.used_ram}}\"\n    | unwrap used_ram_mb\n    [30d]\n  )\n)","5":"max (\nmax_over_time(\n     {application=\"openstack\", log_file_type=\"nova-api\"}\n  |= \"GET \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/detail\"\n  |= \"status: 200\"\n  | regexp `\"GET \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/detail HTTP\/1\\.1\" status: 200 len: \\d+ time: (?P<response_time>\\d+\\.\\d+)`\n    | label_format \n        response_time=\"{{.response_time}}\"\n    | unwrap response_time\n    [30d]\n  )\n)","6":"sum(count_over_time({application=\"openstack\", log_file_type=\"nova-api\"}\n|= \"POST \/v2\/e9746973ac574c6b8a9e8857f56a7608\/os-server-external-events\"\n|= \"status: 200\"\n| __error__ = \"\"\n[30d]))","7":"avg by (application) (\n    avg_over_time({application=\"openstack\", log_file_type=\"nova-api\"}\n    |= \"DELETE \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/\"\n    | regexp `\"DELETE \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/.*\" status: (?P<status>\\d+) len: \\d+ time: (?P<response_time>\\d+\\.\\d+)`\n    | label_format response_time=\"{{.response_time}}\"\n    | unwrap response_time [40d]\n    )\n)","8":"sum by (application)\n(count_over_time({application=\"openstack\", log_file_type=\"nova-api\", log_level=\"INFO\"}\n|= \"HTTP exception thrown: No instances found for any event\"\n[40d]))","9":"sum(count_over_time({application=\"openstack\", log_file_type=~\"nova-compute|nova-api|nova-scheduler\", log_level=\"ERROR\"}\n|= \"Error during ComputeManager._run_image_cache_manager_pass\"\n[40d])) by (log_file_type)","10":"sum(count_over_time({application=\"openstack\"}\n|= \"Bad response code while validating token: 503\"\n[30d]))","11":"count(sum by (base_file_id, application) \n(count_over_time({application=\"openstack\", log_file_type=\"nova-compute\"}\n    |= \"Active base files:\"\n    | regexp \"Active base files: \/var\/lib\/nova\/instances\/_base\/(?P<base_file_id>[a-f0-9]+)\" [30d])))","12":"(last_over_time({application=\"openstack\", log_file_type=\"nova-compute\"}\n|= \"0673dd71-34c5-4fbb-86c4-40623fbe45b4\"\n|= \"in use:\"\n| regexp `image (?P<image_id>[^ ]+) at \\((?P<image_path>[^)]+)\\): in use: on this node (?P<local_use>\\d+) local, (?P<other_nodes>\\d+) on other nodes sharing this instance storage`\n| line_format \"{{.image_id}} has {{.local_use}}\"\n| unwrap local_use\n[40d]))","13":"count(sum by (file_path, application) (\n  count_over_time({application=\"openstack\", log_file_type=~\"nova.*\"} \n  |= \"Unknown base file:\" \n  | regexp \"Unknown base file: (?P<file_path>[^\\\\s]+)\" [30d])))","14":"{application=\"openstack\", log_file_type=\"nova-compute\"}\n|= \"3edec1e4-9678-4a3a-a21b-a145a4ee5e61\"\n|= \"Took\"\n|= \"seconds to deallocate network for instance\"\n| regexp \"\\\\[instance: (?P<instance_id>[^\\\\]]+)\\\\] Took (?P<deallocate_time>\\\\d+\\\\.\\\\d+) seconds to deallocate network for instance\"\n| line_format \"{{.deallocate_time}}\"","15":"(sum (count_over_time({application=\"openstack\", component=\"nova.api.openstack.compute.server_external_events\"}\n|= \"Creating event network-vif-plugged\"\n| regexp \"Creating event network-vif-plugged:(?P<event_id>[^ ]+) for instance (?P<instance_id>[^ ]+)\"\n[1h])))"},"query_explanation":{"0":"bla","1":"1. {application=\"openstack\", log_file_type=\"nova-compute\"}\nFetch all log lines matching label filters.\n2. <expr> |= `3edec1e4-9678-4a3a-a21b-a145a4ee5e61`\nReturn log lines that contain string 3edec1e4-9678-4a3a-a21b-a145a4ee5e61.\n\n3. <expr> |= `Took`\nReturn log lines that contain string Took.\n\n4. <expr> |= `seconds to build instance`\nReturn log lines that contain string seconds to build instance.\n\n5. <expr> | regexp `\\[instance: (?P<instance_id>[^\\]]+)\\] Took (?P<build_time>\\d+\\.\\d+) seconds to build instance`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n6. <expr> | line_format `{{.build_time}}`\nThis will replace log line using a specified template. The template can refer to stream labels and extracted labels.\n\nExample: {{.status_code}} - {{.message}}","2":"1\n{application=\"openstack\", log_file_type=\"nova-compute\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `3416d0fa-6f0f-41ce-9c0a-59ae9a735da8`\nReturn log lines that contain string 3416d0fa-6f0f-41ce-9c0a-59ae9a735da8.\n\n3\n<expr> |~ `Total (memory|disk|vcpu):`\nReturn log lines that match a RE2 regex pattern. Total (memory|disk|vcpu):.\n\n4\n<expr> | regexp `\\[instance: (?P<instance_id>[^\\]]+)\\] Total (?P<resource>\\w+): (?P<total>\\d+(?:\\.\\d+)?) (?P<unit>\\w+), used: (?P<used>\\d+(?:\\.\\d+)?) \\w+`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n5\n<expr> | line_format `{{.resource}}: {{.used}} {{.unit}} used out of {{.total}} {{.unit}}`\nThis will replace log line using a specified template. The template can refer to stream labels and extracted labels.\n\nExample: {{.status_code}} - {{.message}}","3":"1\n{application=\"openstack\", log_file_type=\"nova-compute\", component=\"nova.compute.resource_tracker\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `cp-1.slowvm1.tcloud-pg0.utah.cloudlab.us`\nReturn log lines that contain string cp-1.slowvm1.tcloud-pg0.utah.cloudlab.us.\n\n3\n<expr> |= `Final resource view:`\nReturn log lines that contain string Final resource view:.\n\n4\n<expr> | regexp `Final resource view: name=(?P<node>\\S+) phys_ram=(?P<total_ram>\\d+)MB used_ram=(?P<used_ram>\\d+)MB phys_disk=(?P<total_disk>\\d+)GB used_disk=(?P<used_disk>\\d+)GB total_vcpus=(?P<total_vcpus>\\d+) used_vcpus=(?P<used_vcpus>\\d+)`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n5\n<expr> | label_format used_vcpus=\"{{.used_vcpus}}\"\nThis will change name of label to desired new label. In the example below, label \"error_level\" will be renamed to \"level\".\n\nExample: error_level=`level`\n\nRead the docs for more.\n\n6\n<expr> | unwrap used_vcpus\nUse the extracted label used_vcpus as sample values instead of log lines for the subsequent range aggregation.\n\n7\nmax_over_time(<expr> [30d])\nThe maximum of all values in the specified interval. The range vector is set to 30d.\n\n8\nmax by(node) (<expr>)\nCalculates max over dimensions while preserving label node.","4":"1\n{application=\"openstack\", log_file_type=\"nova-compute\", component=\"nova.compute.resource_tracker\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `cp-1.slowvm1.tcloud-pg0.utah.cloudlab.us`\nReturn log lines that contain string cp-1.slowvm1.tcloud-pg0.utah.cloudlab.us.\n\n3\n<expr> |= `Final resource view:`\nReturn log lines that contain string Final resource view:.\n\n4\n<expr> | regexp `Final resource view: name=(?P<node>\\S+) phys_ram=(?P<total_ram>\\d+)MB used_ram=(?P<used_ram>\\d+)MB phys_disk=(?P<total_disk>\\d+)GB used_disk=(?P<used_disk>\\d+)GB total_vcpus=(?P<total_vcpus>\\d+) used_vcpus=(?P<used_vcpus>\\d+)`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n5\n<expr> | label_format used_ram_mb=\"{{.used_ram}}\"\nThis will change name of label to desired new label. In the example below, label \"error_level\" will be renamed to \"level\".\n\nExample: error_level=`level`\n\nRead the docs for more.\n\n6\n<expr> | unwrap used_ram_mb\nUse the extracted label used_ram_mb as sample values instead of log lines for the subsequent range aggregation.\n\n7\nmax_over_time(<expr> [30d])\nThe maximum of all values in the specified interval. The range vector is set to 30d.\n\n8\nmax by(node) (<expr>)\nCalculates max over dimensions while preserving label node.","5":"1\n{application=\"openstack\", log_file_type=\"nova-api\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `GET \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/detail`\nReturn log lines that contain string GET \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/detail.\n\n3\n<expr> |= `status: 200`\nReturn log lines that contain string status: 200.\n\n4\n<expr> | regexp `\"GET \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/detail HTTP\/1\\.1\" status: 200 len: \\d+ time: (?P<response_time>\\d+\\.\\d+)`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n5\n<expr> | label_format response_time=\"{{.response_time}}\"\nThis will change name of label to desired new label. In the example below, label \"error_level\" will be renamed to \"level\".\n\nExample: error_level=`level`\n\nRead the docs for more.\n\n6\n<expr> | unwrap response_time\nUse the extracted label response_time as sample values instead of log lines for the subsequent range aggregation.\n\n7\nmax_over_time(<expr> [30d])\nThe maximum of all values in the specified interval. The range vector is set to 30d.\n\n8\nmax(<expr>)\nCalculates max over the dimensions.","6":"1\n{application=\"openstack\", log_file_type=\"nova-api\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `POST \/v2\/e9746973ac574c6b8a9e8857f56a7608\/os-server-external-events`\nReturn log lines that contain string POST \/v2\/e9746973ac574c6b8a9e8857f56a7608\/os-server-external-events.\n\n3\n<expr> |= `status: 200`\nReturn log lines that contain string status: 200.\n\n4\n<expr> | __error__=``\nFilter out all formatting and parsing errors.\n\n5\ncount_over_time(<expr> [30d])\nThe count of all values in the specified interval. The range vector is set to 30d.\n\n6\nsum(<expr>)\nCalculates sum over the dimensions","7":"1\n{application=\"openstack\", log_file_type=\"nova-api\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `DELETE \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/`\nReturn log lines that contain string DELETE \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/.\n\n3\n<expr> | regexp `\"DELETE \/v2\/54fadb412c4e40cdbaed9335e4c35a9e\/servers\/.*\" status: (?P<status>\\d+) len: \\d+ time: (?P<response_time>\\d+\\.\\d+)`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n4\n<expr> | label_format response_time=\"{{.response_time}}\"\nThis will change name of label to desired new label. In the example below, label \"error_level\" will be renamed to \"level\".\n\nExample: error_level=`level`\n\nRead the docs for more.\n\n5\n<expr> | unwrap response_time\nUse the extracted label response_time as sample values instead of log lines for the subsequent range aggregation.\n\n6\navg_over_time(<expr> [40d])\nThe average of all values in the specified interval. The range vector is set to 40d.\n\n7\navg by(application) (<expr>)\nCalculates avg over dimensions while preserving label application.","8":"1\n{application=\"openstack\", log_file_type=\"nova-api\", log_level=\"INFO\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `HTTP exception thrown: No instances found for any event`\nReturn log lines that contain string HTTP exception thrown: No instances found for any event.\n\n3\ncount_over_time(<expr> [40d])\nThe count of all values in the specified interval. The range vector is set to 40d.\n\n4\nsum by(application) (<expr>)\nCalculates sum over dimensions while preserving label application.","9":"1\n{application=\"openstack\", log_file_type=~\"nova-compute|nova-api|nova-scheduler\", log_level=\"ERROR\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `Error during ComputeManager._run_image_cache_manager_pass`\nReturn log lines that contain string Error during ComputeManager._run_image_cache_manager_pass.\n\n3\ncount_over_time(<expr> [40d])\nThe count of all values in the specified interval. The range vector is set to 40d.\n\n4\nsum by(log_file_type) (<expr>)\nCalculates sum over dimensions while preserving label log_file_type.","10":"1\n{application=\"openstack\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `Bad response code while validating token: 503`\nReturn log lines that contain string Bad response code while validating token: 503.\n\n3\ncount_over_time(<expr> [30d])\nThe count of all values in the specified interval. The range vector is set to 30d.\n\n4\nsum(<expr>)\nCalculates sum over the dimensions.\n","11":"1\n{application=\"openstack\", log_file_type=\"nova-compute\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `Active base files:`\nReturn log lines that contain string Active base files:.\n\n3\n<expr> | regexp `Active base files: \/var\/lib\/nova\/instances\/_base\/(?P<base_file_id>[a-f0-9]+)`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n4\ncount_over_time(<expr> [30d])\nThe count of all values in the specified interval. The range vector is set to 30d.\n\n5\nsum by(base_file_id, application) (<expr>)\nCalculates sum over dimensions while preserving labels base_file_id and application.\n\n6\ncount(<expr>)\nCalculates count over the dimensions.","12":"1\n{application=\"openstack\", log_file_type=\"nova-compute\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `0673dd71-34c5-4fbb-86c4-40623fbe45b4`\nReturn log lines that contain string 0673dd71-34c5-4fbb-86c4-40623fbe45b4.\n\n3\n<expr> |= `in use:`\nReturn log lines that contain string in use:.\n\n4\n<expr> | regexp `image (?P<image_id>[^ ]+) at \\((?P<image_path>[^)]+)\\): in use: on this node (?P<local_use>\\d+) local, (?P<other_nodes>\\d+) on other nodes sharing this instance storage`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n5\n<expr> | line_format `{{.image_id}} has {{.local_use}}`\nThis will replace log line using a specified template. The template can refer to stream labels and extracted labels.\n\nExample: {{.status_code}} - {{.message}}\n\nRead the docs for more.\n\n6\n<expr> | unwrap local_use\nUse the extracted label local_use as sample values instead of log lines for the subsequent range aggregation.\n\n7\nlast_over_time(<expr> [40d])\nThe last of all values in the specified interval. Only available in Loki 2.3+. The range vector is set to 40d.","13":"1\n{application=\"openstack\", log_file_type=~\"nova.*\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `Unknown base file:`\nReturn log lines that contain string Unknown base file:.\n\n3\n<expr> | regexp `Unknown base file: (?P<file_path>[^\\s]+)`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n4\ncount_over_time(<expr> [30d])\nThe count of all values in the specified interval. The range vector is set to 30d.\n\n5\nsum by(file_path, application) (<expr>)\nCalculates sum over dimensions while preserving labels file_path and application.\n\n6\ncount(<expr>)\nCalculates count over the dimensions.","14":"1\n{application=\"openstack\", log_file_type=\"nova-compute\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `3edec1e4-9678-4a3a-a21b-a145a4ee5e61`\nReturn log lines that contain string 3edec1e4-9678-4a3a-a21b-a145a4ee5e61.\n\n3\n<expr> |= `Took`\nReturn log lines that contain string Took.\n\n4\n<expr> |= `seconds to deallocate network for instance`\nReturn log lines that contain string seconds to deallocate network for instance.\n\n5\n<expr> | regexp `\\[instance: (?P<instance_id>[^\\]]+)\\] Took (?P<deallocate_time>\\d+\\.\\d+) seconds to deallocate network for instance`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n6\n<expr> | line_format `{{.deallocate_time}}`\nThis will replace log line using a specified template. The template can refer to stream labels and extracted labels.\n\nExample: {{.status_code}} - {{.message}}","15":"1\n{application=\"openstack\", component=\"nova.api.openstack.compute.server_external_events\"}\nFetch all log lines matching label filters.\n2\n<expr> |= `Creating event network-vif-plugged`\nReturn log lines that contain string Creating event network-vif-plugged.\n\n3\n<expr> | regexp `Creating event network-vif-plugged:(?P<event_id>[^ ]+) for instance (?P<instance_id>[^ ]+)`\nThe regexp parser takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.\n\n4\ncount_over_time(<expr> [30d])\nThe count of all values in the specified interval. The range vector is set to 30d.\n\n5\nsum(<expr>)\nCalculates sum over the dimensions."},"query_result":{"0":"3edec1e4-9678-4a3a-a21b-a145a4ee5e61 took 20.58","1":"21.38","2":"vcpu: 0.00 VCPU used out of 16 VCPU\ndisk: 0.00 GB used out of 15 GB\nmemory: 512.00 MB used out of 64172 MB","3":"<graph>\ngraph with plot of used_vcpus across different logs.\nmaximum is 1\n<\/graph>","4":"<graph>\\\ngraph with plot of used_vcpus across different logs. maximum is 2560MB RAM\n<\/graph>\n","5":"1.30\n<graph>\ngraph with 1.30 as a line.\n<\/graph>","6":"2.07k\n<graph>\ngraph with 2.07k as straight line\n<\/graph>","7":"0.267\n<graph>\nsingle line graph of 0.267 for the entire OpenStack logs\n<\/graph>","8":"2.06k\n<graph>","9":"8\n<graph>","10":"2\n<graph>","11":"1","12":"0673dd71-34c5-4fbb-86c4-40623fbe45b4 has 1","13":"1\n<graph>","14":"0.47","15":"1.91k"}}